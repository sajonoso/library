<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />

    <title>File Processor template</title>
    <meta name="description" content="Generic File processor template" />
    <meta name="author" content="me" />

    <!-- <link rel="stylesheet" href="css/styles.css?v=1.0"> -->
    <style>
      #dropzone1 {
        width: 60%;
        height: 200px;
      }
      .droptarget {
        background-color: chocolate;
        border: 3px solid black;
      }
      .droptarget.dragover {
        background-color: rgb(250, 145, 70);
        border: 3px dashed black;
      }
    </style>
  </head>

  <body ondrop="return false;">
    <div id="dropzone1"></div>

    <!-- <script src="js/scripts.js"></script> -->
    <script>
      const print = console.log;
      function ID(o) {
        return document.getElementById(o);
      }

      const DragDrop = {
        checkSupport: function() {
          // prettier-ignore
          return (window.File && window.FileReader && window.FileList && window.Blob)
        },

        // prettier-ignore
        add: function(divID, process) {
          const dropZone = ID(divID);
          const currentClass = dropZone.className
          if (currentClass.indexOf('droptarget') < 0) dropZone.className = currentClass + ' droptarget'
          dropZone.addEventListener("dragenter", DragDrop.onDragEnterLeave, false);
          dropZone.addEventListener("dragleave", DragDrop.onDragEnterLeave, false);
          dropZone.addEventListener("dragover", DragDrop.onDragOver, false);
          dropZone.addEventListener("drop", function(evt) { DragDrop.onDrop(evt, process) }, false);
        },
        readFileAndProcess: function(file, count, total, process) {
          const fr = new FileReader();
          fr.onload = function() {
            if (fr.result && typeof process === "function") {
              process(fr.result, count, total);
            }
          };
          fr.readAsArrayBuffer(file);
          // fr.readAsText(file);
        },
        // prettier-ignore
        onDrop: function(evt, process) {
          evt.stopPropagation();
          evt.preventDefault();

          const files = evt.dataTransfer.files;
          var output = [];
          for (var i = 0, f; (f = files[i]); i++) {
            DragDrop.readFileAndProcess(f, i+1, files.length, process);
          }

          evt.target.className = evt.target.className.replace("dragover", "").trim();
        },
        // prettier-ignore
        onDragEnterLeave: function(evt) {
          const currentClass = evt.target.className;

          if (evt.type === "dragleave") {
            evt.target.className = currentClass.replace("dragover", "").trim();
          } else if (evt.type === "dragenter" && currentClass.indexOf("dragover") < 0) {
            evt.target.className = (currentClass + " dragover").trim();
          }
        },
        onDragOver: function(evt) {
          evt.preventDefault();
          evt.dataTransfer.dropEffect = "copy";
        }
      };

      function saveFileString(filename, data) {
        var blob = new Blob([data], { type: "data:application/octet-stream" });
        if (window.navigator.msSaveOrOpenBlob) {
          window.navigator.msSaveBlob(blob, filename);
        } else {
          var elem = window.document.createElement("a");
          elem.href = window.URL.createObjectURL(blob);
          elem.download = filename;
          document.body.appendChild(elem);
          elem.click();
          document.body.removeChild(elem);
          window.URL.revokeObjectURL(elem.href);
        }
      }

      function processFile(buf, count, total) {
        // console.log(count + " / " + total);

        const fileUI8 = new Uint8Array(buf);
        // const fileString = String.fromCharCode.apply(null, new Uint8Array(buf));

        // print(fileString);
        saveFileString('shiny.bin', fileUI8)
      }

      if (DragDrop.checkSupport()) {
        DragDrop.add("dropzone1", processFile);
      } else {
        alert("The File APIs are not fully supported in this browser.");
      }

      print("Ready!");
    </script>
  </body>
</html>
